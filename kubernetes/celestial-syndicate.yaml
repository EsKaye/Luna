apiVersion: v1
kind: Namespace
metadata:
  name: celestial-syndicate
  labels:
    name: celestial-syndicate
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: celestial-config
  namespace: celestial-syndicate
data:
  NODE_ENV: "production"
  REDIS_HOST: "redis-service"
  MONGODB_URI: "mongodb://mongodb-service:27017"
  ALLOWED_ORIGINS: "https://celestial-syndicate.com,https://app.celestial-syndicate.com"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: celestial-secrets
  namespace: celestial-syndicate
type: Opaque
data:
  OPENAI_API_KEY: <base64-encoded-openai-key>
  AWS_ACCESS_KEY_ID: <base64-encoded-aws-key>
  AWS_SECRET_ACCESS_KEY: <base64-encoded-aws-secret>
  AWS_REGION: <base64-encoded-aws-region>
  NASA_API_KEY: <base64-encoded-nasa-key>
  ESA_API_KEY: <base64-encoded-esa-key>
  WOLFRAM_APP_ID: <base64-encoded-wolfram-key>
  ETHEREUM_RPC_URL: <base64-encoded-ethereum-url>
  POLYGON_RPC_URL: <base64-encoded-polygon-url>
  SOLANA_RPC_URL: <base64-encoded-solana-url>
  STRIPE_SECRET_KEY: <base64-encoded-stripe-key>
  ALPACA_API_KEY: <base64-encoded-alpaca-key>
  ALPACA_SECRET_KEY: <base64-encoded-alpaca-secret>
  REDIS_PASSWORD: <base64-encoded-redis-password>
  MONGO_ROOT_USERNAME: <base64-encoded-mongo-user>
  MONGO_ROOT_PASSWORD: <base64-encoded-mongo-password>
  RABBITMQ_USER: <base64-encoded-rabbitmq-user>
  RABBITMQ_PASSWORD: <base64-encoded-rabbitmq-password>
  GRAFANA_PASSWORD: <base64-encoded-grafana-password>
  KONG_PG_USER: <base64-encoded-kong-user>
  KONG_PG_PASSWORD: <base64-encoded-kong-password>
  BACKUP_S3_BUCKET: <base64-encoded-backup-bucket>
---
# AI Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-service
  namespace: celestial-syndicate
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ai-service
  template:
    metadata:
      labels:
        app: ai-service
    spec:
      containers:
      - name: ai-service
        image: celestial-syndicate/ai-service:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: NODE_ENV
        - name: PORT
          value: "3001"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: REDIS_HOST
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: MONGODB_URI
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: OPENAI_API_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: AWS_REGION
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
---
# AI Service Service
apiVersion: v1
kind: Service
metadata:
  name: ai-service
  namespace: celestial-syndicate
spec:
  selector:
    app: ai-service
  ports:
  - protocol: TCP
    port: 3001
    targetPort: 3001
  type: ClusterIP
---
# Blockchain Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-service
  namespace: celestial-syndicate
spec:
  replicas: 2
  selector:
    matchLabels:
      app: blockchain-service
  template:
    metadata:
      labels:
        app: blockchain-service
    spec:
      containers:
      - name: blockchain-service
        image: celestial-syndicate/blockchain-service:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: NODE_ENV
        - name: PORT
          value: "3002"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: REDIS_HOST
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: MONGODB_URI
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: ETHEREUM_RPC_URL
        - name: POLYGON_RPC_URL
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: POLYGON_RPC_URL
        - name: SOLANA_RPC_URL
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: SOLANA_RPC_URL
        resources:
          requests:
            memory: "400Mi"
            cpu: "400m"
          limits:
            memory: "800Mi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Economy Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: economy-service
  namespace: celestial-syndicate
spec:
  replicas: 2
  selector:
    matchLabels:
      app: economy-service
  template:
    metadata:
      labels:
        app: economy-service
    spec:
      containers:
      - name: economy-service
        image: celestial-syndicate/economy-service:latest
        ports:
        - containerPort: 3006
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: NODE_ENV
        - name: PORT
          value: "3006"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: REDIS_HOST
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: MONGODB_URI
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: STRIPE_SECRET_KEY
        - name: ALPACA_API_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: ALPACA_API_KEY
        - name: ALPACA_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: ALPACA_SECRET_KEY
        resources:
          requests:
            memory: "400Mi"
            cpu: "400m"
          limits:
            memory: "800Mi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Missions Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: missions-service
  namespace: celestial-syndicate
spec:
  replicas: 2
  selector:
    matchLabels:
      app: missions-service
  template:
    metadata:
      labels:
        app: missions-service
    spec:
      containers:
      - name: missions-service
        image: celestial-syndicate/missions-service:latest
        ports:
        - containerPort: 3007
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: NODE_ENV
        - name: PORT
          value: "3007"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: REDIS_HOST
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: MONGODB_URI
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: OPENAI_API_KEY
        resources:
          requests:
            memory: "400Mi"
            cpu: "400m"
          limits:
            memory: "800Mi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3007
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3007
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Scientific Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scientific-service
  namespace: celestial-syndicate
spec:
  replicas: 2
  selector:
    matchLabels:
      app: scientific-service
  template:
    metadata:
      labels:
        app: scientific-service
    spec:
      containers:
      - name: scientific-service
        image: celestial-syndicate/scientific-service:latest
        ports:
        - containerPort: 3003
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: NODE_ENV
        - name: PORT
          value: "3003"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: REDIS_HOST
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: MONGODB_URI
        - name: NASA_API_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: NASA_API_KEY
        - name: ESA_API_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: ESA_API_KEY
        - name: WOLFRAM_APP_ID
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: WOLFRAM_APP_ID
        resources:
          requests:
            memory: "400Mi"
            cpu: "400m"
          limits:
            memory: "800Mi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Cloud Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-service
  namespace: celestial-syndicate
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cloud-service
  template:
    metadata:
      labels:
        app: cloud-service
    spec:
      containers:
      - name: cloud-service
        image: celestial-syndicate/cloud-service:latest
        ports:
        - containerPort: 3004
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: NODE_ENV
        - name: PORT
          value: "3004"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: REDIS_HOST
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: celestial-config
              key: MONGODB_URI
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: AWS_REGION
        resources:
          requests:
            memory: "400Mi"
            cpu: "400m"
          limits:
            memory: "800Mi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 5
---
# MongoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: celestial-syndicate
spec:
  serviceName: mongodb-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: MONGO_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: MONGO_ROOT_PASSWORD
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: celestial-syndicate
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: celestial-syndicate
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        command:
        - /bin/prometheus
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=200h
        - --web.enable-lifecycle
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: celestial-syndicate
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: celestial-secrets
              key: GRAFANA_PASSWORD
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: celestial-ingress
  namespace: celestial-syndicate
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.celestial-syndicate.com
    - app.celestial-syndicate.com
    - admin.celestial-syndicate.com
    secretName: celestial-tls
  rules:
  - host: api.celestial-syndicate.com
    http:
      paths:
      - path: /api/ai
        pathType: Prefix
        backend:
          service:
            name: ai-service
            port:
              number: 3001
      - path: /api/blockchain
        pathType: Prefix
        backend:
          service:
            name: blockchain-service
            port:
              number: 3002
      - path: /api/economy
        pathType: Prefix
        backend:
          service:
            name: economy-service
            port:
              number: 3006
      - path: /api/missions
        pathType: Prefix
        backend:
          service:
            name: missions-service
            port:
              number: 3007
      - path: /api/scientific
        pathType: Prefix
        backend:
          service:
            name: scientific-service
            port:
              number: 3003
      - path: /api/cloud
        pathType: Prefix
        backend:
          service:
            name: cloud-service
            port:
              number: 3004
  - host: app.celestial-syndicate.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  - host: admin.celestial-syndicate.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
---
# Horizontal Pod Autoscaler for AI Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-service-hpa
  namespace: celestial-syndicate
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Horizontal Pod Autoscaler for Economy Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: economy-service-hpa
  namespace: celestial-syndicate
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: economy-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80 