version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ai-service
      - blockchain-service
      - economy-service
      - missions-service
      - scientific-service
      - cloud-service
    networks:
      - celestial-network
    restart: unless-stopped

  # AI Service
  ai-service:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongodb:27017/celestial-ai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    depends_on:
      - redis
      - mongodb
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Blockchain Service
  blockchain-service:
    build:
      context: ./services/blockchain
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongodb:27017/celestial-blockchain
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
    depends_on:
      - redis
      - mongodb
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.4'
          memory: 400M

  # Economy Service
  economy-service:
    build:
      context: ./services/economy
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3006
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongodb:27017/celestial-economy
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    depends_on:
      - redis
      - mongodb
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.4'
          memory: 400M

  # Missions Service
  missions-service:
    build:
      context: ./services/missions
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3007
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongodb:27017/celestial-missions
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
      - mongodb
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.4'
          memory: 400M

  # Scientific Service
  scientific-service:
    build:
      context: ./services/scientific
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3003
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongodb:27017/celestial-scientific
      - NASA_API_KEY=${NASA_API_KEY}
      - ESA_API_KEY=${ESA_API_KEY}
      - WOLFRAM_APP_ID=${WOLFRAM_APP_ID}
    depends_on:
      - redis
      - mongodb
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.4'
          memory: 400M

  # Cloud Service
  cloud-service:
    build:
      context: ./services/cloud
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3004
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongodb:27017/celestial-cloud
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
    depends_on:
      - redis
      - mongodb
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.4'
          memory: 400M

  # Database
  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - celestial-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - celestial-network
    restart: unless-stopped

  # Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - celestial-network
    restart: unless-stopped

  # Service Discovery
  consul:
    image: consul:latest
    ports:
      - "8500:8500"
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    networks:
      - celestial-network
    restart: unless-stopped

  # API Gateway
  kong:
    image: kong:3.0
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=${KONG_PG_USER}
      - KONG_PG_PASSWORD=${KONG_PG_PASSWORD}
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    depends_on:
      - postgres
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - celestial-network
    restart: unless-stopped

  # Database for Kong
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${KONG_PG_USER}
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=${KONG_PG_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - celestial-network
    restart: unless-stopped

  # Backup Service
  backup-service:
    build:
      context: ./services/backup
      dockerfile: Dockerfile
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
    volumes:
      - mongodb_data:/backup/mongodb
      - redis_data:/backup/redis
    networks:
      - celestial-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  postgres_data:
    driver: local

networks:
  celestial-network:
    driver: overlay
    attachable: true 